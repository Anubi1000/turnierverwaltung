// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Turnierverwaltung.Server.Database;

#nullable disable

namespace Turnierverwaltung.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250623071834_Discipline_ShowInResults")]
    partial class Discipline_ShowInResults
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("DisciplineTeamDiscipline", b =>
                {
                    b.Property<int>("BasedOnId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedInId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BasedOnId", "UsedInId");

                    b.HasIndex("UsedInId");

                    b.ToTable("DisciplineTeamDiscipline");
                });

            modelBuilder.Entity("TeamTeamDiscipline", b =>
                {
                    b.Property<int>("ParticipatingDisciplinesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipatingTeamsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParticipatingDisciplinesId", "ParticipatingTeamsId");

                    b.HasIndex("ParticipatingTeamsId");

                    b.ToTable("TeamTeamDiscipline");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountOfBestRoundsToShow")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AreGendersSeparated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowInResults")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.ParticipantResult", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParticipantId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("ParticipantResults");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.TeamDiscipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TeamDisciplines");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Date")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTeamSizeFixed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamSize")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("DisciplineTeamDiscipline", b =>
                {
                    b.HasOne("Turnierverwaltung.Server.Database.Model.Discipline", null)
                        .WithMany()
                        .HasForeignKey("BasedOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turnierverwaltung.Server.Database.Model.TeamDiscipline", null)
                        .WithMany()
                        .HasForeignKey("UsedInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamTeamDiscipline", b =>
                {
                    b.HasOne("Turnierverwaltung.Server.Database.Model.TeamDiscipline", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingDisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turnierverwaltung.Server.Database.Model.Team", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Club", b =>
                {
                    b.HasOne("Turnierverwaltung.Server.Database.Model.Tournament", "Tournament")
                        .WithMany("Clubs")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Discipline", b =>
                {
                    b.HasOne("Turnierverwaltung.Server.Database.Model.Tournament", "Tournament")
                        .WithMany("Disciplines")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Turnierverwaltung.Server.Database.Model.Discipline+Value", "Values", b1 =>
                        {
                            b1.Property<int>("DisciplineId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsAdded")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("DisciplineId", "__synthesizedOrdinal");

                            b1.ToTable("Disciplines");

                            b1.ToJson("Values");

                            b1.WithOwner()
                                .HasForeignKey("DisciplineId");
                        });

                    b.Navigation("Tournament");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Participant", b =>
                {
                    b.HasOne("Turnierverwaltung.Server.Database.Model.Club", "Club")
                        .WithMany("Members")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turnierverwaltung.Server.Database.Model.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId");

                    b.HasOne("Turnierverwaltung.Server.Database.Model.Tournament", "Tournament")
                        .WithMany("Participants")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.ParticipantResult", b =>
                {
                    b.HasOne("Turnierverwaltung.Server.Database.Model.Discipline", "Discipline")
                        .WithMany("Results")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turnierverwaltung.Server.Database.Model.Participant", "Participant")
                        .WithMany("Results")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Turnierverwaltung.Server.Database.Model.ParticipantResult+Round", "Rounds", b1 =>
                        {
                            b1.Property<int>("ParticipantResultParticipantId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ParticipantResultDisciplineId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("INTEGER");

                            b1.PrimitiveCollection<string>("Values")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ParticipantResultParticipantId", "ParticipantResultDisciplineId", "__synthesizedOrdinal");

                            b1.ToTable("ParticipantResults");

                            b1.ToJson("Rounds");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantResultParticipantId", "ParticipantResultDisciplineId");
                        });

                    b.Navigation("Discipline");

                    b.Navigation("Participant");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Team", b =>
                {
                    b.HasOne("Turnierverwaltung.Server.Database.Model.Tournament", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.TeamDiscipline", b =>
                {
                    b.HasOne("Turnierverwaltung.Server.Database.Model.Tournament", "Tournament")
                        .WithMany("TeamDisciplines")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Club", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Discipline", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Participant", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Team", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Turnierverwaltung.Server.Database.Model.Tournament", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Disciplines");

                    b.Navigation("Participants");

                    b.Navigation("TeamDisciplines");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}

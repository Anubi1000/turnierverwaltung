/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Turnierverwaltung
 * OpenAPI spec version: 1.0.0
 */
import type {
  AuthInfoDto,
  ClubDetailDto,
  ClubEditDto,
  DisciplineDetailDto,
  DisciplineEditDto,
  HttpValidationProblemDetails,
  ListClubDto,
  ListDisciplineDto,
  ListParticipantDto,
  ListTeamDisciplineDto,
  ListTeamDto,
  ListTournamentDto,
  ParticipantDetailDto,
  ParticipantEditDto,
  ParticipantResultDetailDto,
  ParticipantResultEditDto,
  ScoreboardData,
  TeamDetailDto,
  TeamDisciplineDetailDto,
  TeamDisciplineEditDto,
  TeamEditDto,
  TournamentDetailDto,
  TournamentEditDto,
  WordDocGenerationDto,
} from "./schemas";
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

export const getPing = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.default.get(`/api/ping`, options);
};

export const getGetPingQueryKey = () => {
  return ["api", "ping"] as const;
};

export const getGetPingQueryOptions = <
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetPingQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPing>>> = ({
    signal,
  }) => getPing({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPing>>,
    TError,
    TData
  >;
};

export type GetPingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPing>>
>;
export type GetPingQueryError = AxiosError<unknown>;

export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPingQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const checkAuth = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthInfoDto>> => {
  return axios.default.get(`/api/auth`, options);
};

export const getCheckAuthQueryKey = () => {
  return ["api", "auth"] as const;
};

export const getCheckAuthQueryOptions = <
  TData = Awaited<ReturnType<typeof checkAuth>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof checkAuth>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getCheckAuthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof checkAuth>>> = ({
    signal,
  }) => checkAuth({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof checkAuth>>,
    TError,
    TData
  >;
};

export type CheckAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkAuth>>
>;
export type CheckAuthQueryError = AxiosError<unknown>;

export function useCheckAuth<
  TData = Awaited<ReturnType<typeof checkAuth>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof checkAuth>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCheckAuthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getTournaments = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListTournamentDto[]>> => {
  return axios.default.get(`/api/tournaments`, options);
};

export const getGetTournamentsQueryKey = () => {
  return ["api", "tournaments"] as const;
};

export const getGetTournamentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTournaments>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTournaments>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTournamentsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTournaments>>> = ({
    signal,
  }) => getTournaments({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTournaments>>,
    TError,
    TData
  >;
};

export type GetTournamentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTournaments>>
>;
export type GetTournamentsQueryError = AxiosError<unknown>;

export function useGetTournaments<
  TData = Awaited<ReturnType<typeof getTournaments>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTournaments>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTournamentsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const createTournament = (
  tournamentEditDto: MaybeRef<TournamentEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  tournamentEditDto = unref(tournamentEditDto);

  return axios.default.post(`/api/tournaments`, tournamentEditDto, options);
};

export const getCreateTournamentMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTournament>>,
    TError,
    { data: TournamentEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTournament>>,
  TError,
  { data: TournamentEditDto },
  TContext
> => {
  const mutationKey = ["createTournament"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTournament>>,
    { data: TournamentEditDto }
  > = (props) => {
    const { data } = props ?? {};

    return createTournament(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTournamentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTournament>>
>;
export type CreateTournamentMutationBody = TournamentEditDto;
export type CreateTournamentMutationError =
  AxiosError<HttpValidationProblemDetails>;

export const useCreateTournament = <
  TError = AxiosError<HttpValidationProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTournament>>,
      TError,
      { data: TournamentEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createTournament>>,
  TError,
  { data: TournamentEditDto },
  TContext
> => {
  const mutationOptions = getCreateTournamentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getTournament = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TournamentDetailDto>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(`/api/tournaments/${tournamentId}`, options);
};

export const getGetTournamentQueryKey = (tournamentId: MaybeRef<number>) => {
  return ["api", "tournaments", tournamentId] as const;
};

export const getGetTournamentQueryOptions = <
  TData = Awaited<ReturnType<typeof getTournament>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTournament>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTournamentQueryKey(tournamentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTournament>>> = ({
    signal,
  }) => getTournament(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTournament>>,
    TError,
    TData
  >;
};

export type GetTournamentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTournament>>
>;
export type GetTournamentQueryError = AxiosError<void>;

export function useGetTournament<
  TData = Awaited<ReturnType<typeof getTournament>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTournament>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTournamentQueryOptions(tournamentId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const updateTournament = (
  tournamentId: MaybeRef<number>,
  tournamentEditDto: MaybeRef<TournamentEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  tournamentId = unref(tournamentId);
  tournamentEditDto = unref(tournamentEditDto);

  return axios.default.put(
    `/api/tournaments/${tournamentId}`,
    tournamentEditDto,
    options,
  );
};

export const getUpdateTournamentMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTournament>>,
    TError,
    { tournamentId: number; data: TournamentEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTournament>>,
  TError,
  { tournamentId: number; data: TournamentEditDto },
  TContext
> => {
  const mutationKey = ["updateTournament"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTournament>>,
    { tournamentId: number; data: TournamentEditDto }
  > = (props) => {
    const { tournamentId, data } = props ?? {};

    return updateTournament(tournamentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTournamentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTournament>>
>;
export type UpdateTournamentMutationBody = TournamentEditDto;
export type UpdateTournamentMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useUpdateTournament = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTournament>>,
      TError,
      { tournamentId: number; data: TournamentEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateTournament>>,
  TError,
  { tournamentId: number; data: TournamentEditDto },
  TContext
> => {
  const mutationOptions = getUpdateTournamentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteTournament = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  tournamentId = unref(tournamentId);

  return axios.default.delete(`/api/tournaments/${tournamentId}`, options);
};

export const getDeleteTournamentMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTournament>>,
    TError,
    { tournamentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTournament>>,
  TError,
  { tournamentId: number },
  TContext
> => {
  const mutationKey = ["deleteTournament"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTournament>>,
    { tournamentId: number }
  > = (props) => {
    const { tournamentId } = props ?? {};

    return deleteTournament(tournamentId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTournamentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTournament>>
>;

export type DeleteTournamentMutationError = AxiosError<void>;

export const useDeleteTournament = <
  TError = AxiosError<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTournament>>,
      TError,
      { tournamentId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteTournament>>,
  TError,
  { tournamentId: number },
  TContext
> => {
  const mutationOptions = getDeleteTournamentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getTournamentOverview = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ScoreboardData>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(
    `/api/tournaments/${tournamentId}/overview`,
    options,
  );
};

export const getGetTournamentOverviewQueryKey = (
  tournamentId: MaybeRef<number>,
) => {
  return ["api", "tournaments", tournamentId, "overview"] as const;
};

export const getGetTournamentOverviewQueryOptions = <
  TData = Awaited<ReturnType<typeof getTournamentOverview>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTournamentOverview>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTournamentOverviewQueryKey(tournamentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTournamentOverview>>
  > = ({ signal }) =>
    getTournamentOverview(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTournamentOverview>>,
    TError,
    TData
  >;
};

export type GetTournamentOverviewQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTournamentOverview>>
>;
export type GetTournamentOverviewQueryError = AxiosError<void>;

export function useGetTournamentOverview<
  TData = Awaited<ReturnType<typeof getTournamentOverview>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTournamentOverview>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTournamentOverviewQueryOptions(
    tournamentId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getTournamentScoreboardAsWord = (
  tournamentId: MaybeRef<number>,
  wordDocGenerationDto: MaybeRef<WordDocGenerationDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  tournamentId = unref(tournamentId);
  wordDocGenerationDto = unref(wordDocGenerationDto);

  return axios.default.post(
    `/api/tournaments/${tournamentId}/overview/download`,
    wordDocGenerationDto,
    options,
  );
};

export const getGetTournamentScoreboardAsWordMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTournamentScoreboardAsWord>>,
    TError,
    { tournamentId: number; data: WordDocGenerationDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof getTournamentScoreboardAsWord>>,
  TError,
  { tournamentId: number; data: WordDocGenerationDto },
  TContext
> => {
  const mutationKey = ["getTournamentScoreboardAsWord"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getTournamentScoreboardAsWord>>,
    { tournamentId: number; data: WordDocGenerationDto }
  > = (props) => {
    const { tournamentId, data } = props ?? {};

    return getTournamentScoreboardAsWord(tournamentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GetTournamentScoreboardAsWordMutationResult = NonNullable<
  Awaited<ReturnType<typeof getTournamentScoreboardAsWord>>
>;
export type GetTournamentScoreboardAsWordMutationBody = WordDocGenerationDto;
export type GetTournamentScoreboardAsWordMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useGetTournamentScoreboardAsWord = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getTournamentScoreboardAsWord>>,
      TError,
      { tournamentId: number; data: WordDocGenerationDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof getTournamentScoreboardAsWord>>,
  TError,
  { tournamentId: number; data: WordDocGenerationDto },
  TContext
> => {
  const mutationOptions =
    getGetTournamentScoreboardAsWordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getClubs = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListClubDto[]>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(`/api/tournaments/${tournamentId}/clubs`, options);
};

export const getGetClubsQueryKey = (tournamentId: MaybeRef<number>) => {
  return ["api", "tournaments", tournamentId, "clubs"] as const;
};

export const getGetClubsQueryOptions = <
  TData = Awaited<ReturnType<typeof getClubs>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClubs>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetClubsQueryKey(tournamentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getClubs>>> = ({
    signal,
  }) => getClubs(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getClubs>>, TError, TData>;
};

export type GetClubsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClubs>>
>;
export type GetClubsQueryError = AxiosError<void>;

export function useGetClubs<
  TData = Awaited<ReturnType<typeof getClubs>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClubs>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetClubsQueryOptions(tournamentId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const createClub = (
  tournamentId: MaybeRef<number>,
  clubEditDto: MaybeRef<ClubEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  tournamentId = unref(tournamentId);
  clubEditDto = unref(clubEditDto);

  return axios.default.post(
    `/api/tournaments/${tournamentId}/clubs`,
    clubEditDto,
    options,
  );
};

export const getCreateClubMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createClub>>,
    TError,
    { tournamentId: number; data: ClubEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createClub>>,
  TError,
  { tournamentId: number; data: ClubEditDto },
  TContext
> => {
  const mutationKey = ["createClub"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createClub>>,
    { tournamentId: number; data: ClubEditDto }
  > = (props) => {
    const { tournamentId, data } = props ?? {};

    return createClub(tournamentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateClubMutationResult = NonNullable<
  Awaited<ReturnType<typeof createClub>>
>;
export type CreateClubMutationBody = ClubEditDto;
export type CreateClubMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useCreateClub = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createClub>>,
      TError,
      { tournamentId: number; data: ClubEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createClub>>,
  TError,
  { tournamentId: number; data: ClubEditDto },
  TContext
> => {
  const mutationOptions = getCreateClubMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getClub = (
  clubId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ClubDetailDto>> => {
  clubId = unref(clubId);

  return axios.default.get(`/api/clubs/${clubId}`, options);
};

export const getGetClubQueryKey = (clubId: MaybeRef<number>) => {
  return ["api", "clubs", clubId] as const;
};

export const getGetClubQueryOptions = <
  TData = Awaited<ReturnType<typeof getClub>>,
  TError = AxiosError<void>,
>(
  clubId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClub>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetClubQueryKey(clubId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getClub>>> = ({
    signal,
  }) => getClub(clubId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(clubId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getClub>>, TError, TData>;
};

export type GetClubQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClub>>
>;
export type GetClubQueryError = AxiosError<void>;

export function useGetClub<
  TData = Awaited<ReturnType<typeof getClub>>,
  TError = AxiosError<void>,
>(
  clubId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getClub>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetClubQueryOptions(clubId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const updateClub = (
  clubId: MaybeRef<number>,
  clubEditDto: MaybeRef<ClubEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  clubId = unref(clubId);
  clubEditDto = unref(clubEditDto);

  return axios.default.put(`/api/clubs/${clubId}`, clubEditDto, options);
};

export const getUpdateClubMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateClub>>,
    TError,
    { clubId: number; data: ClubEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateClub>>,
  TError,
  { clubId: number; data: ClubEditDto },
  TContext
> => {
  const mutationKey = ["updateClub"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateClub>>,
    { clubId: number; data: ClubEditDto }
  > = (props) => {
    const { clubId, data } = props ?? {};

    return updateClub(clubId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateClubMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateClub>>
>;
export type UpdateClubMutationBody = ClubEditDto;
export type UpdateClubMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useUpdateClub = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateClub>>,
      TError,
      { clubId: number; data: ClubEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateClub>>,
  TError,
  { clubId: number; data: ClubEditDto },
  TContext
> => {
  const mutationOptions = getUpdateClubMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteClub = (
  clubId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  clubId = unref(clubId);

  return axios.default.delete(`/api/clubs/${clubId}`, options);
};

export const getDeleteClubMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteClub>>,
    TError,
    { clubId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteClub>>,
  TError,
  { clubId: number },
  TContext
> => {
  const mutationKey = ["deleteClub"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteClub>>,
    { clubId: number }
  > = (props) => {
    const { clubId } = props ?? {};

    return deleteClub(clubId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteClubMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteClub>>
>;

export type DeleteClubMutationError = AxiosError<void>;

export const useDeleteClub = <TError = AxiosError<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteClub>>,
      TError,
      { clubId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteClub>>,
  TError,
  { clubId: number },
  TContext
> => {
  const mutationOptions = getDeleteClubMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getDisciplines = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListDisciplineDto[]>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(
    `/api/tournaments/${tournamentId}/disciplines`,
    options,
  );
};

export const getGetDisciplinesQueryKey = (tournamentId: MaybeRef<number>) => {
  return ["api", "tournaments", tournamentId, "disciplines"] as const;
};

export const getGetDisciplinesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDisciplines>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDisciplines>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetDisciplinesQueryKey(tournamentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDisciplines>>> = ({
    signal,
  }) => getDisciplines(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDisciplines>>,
    TError,
    TData
  >;
};

export type GetDisciplinesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDisciplines>>
>;
export type GetDisciplinesQueryError = AxiosError<void>;

export function useGetDisciplines<
  TData = Awaited<ReturnType<typeof getDisciplines>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDisciplines>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDisciplinesQueryOptions(tournamentId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const createDiscipline = (
  tournamentId: MaybeRef<number>,
  disciplineEditDto: MaybeRef<DisciplineEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  tournamentId = unref(tournamentId);
  disciplineEditDto = unref(disciplineEditDto);

  return axios.default.post(
    `/api/tournaments/${tournamentId}/disciplines`,
    disciplineEditDto,
    options,
  );
};

export const getCreateDisciplineMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDiscipline>>,
    TError,
    { tournamentId: number; data: DisciplineEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDiscipline>>,
  TError,
  { tournamentId: number; data: DisciplineEditDto },
  TContext
> => {
  const mutationKey = ["createDiscipline"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDiscipline>>,
    { tournamentId: number; data: DisciplineEditDto }
  > = (props) => {
    const { tournamentId, data } = props ?? {};

    return createDiscipline(tournamentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateDisciplineMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDiscipline>>
>;
export type CreateDisciplineMutationBody = DisciplineEditDto;
export type CreateDisciplineMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useCreateDiscipline = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createDiscipline>>,
      TError,
      { tournamentId: number; data: DisciplineEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createDiscipline>>,
  TError,
  { tournamentId: number; data: DisciplineEditDto },
  TContext
> => {
  const mutationOptions = getCreateDisciplineMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getDiscipline = (
  disciplineId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DisciplineDetailDto>> => {
  disciplineId = unref(disciplineId);

  return axios.default.get(`/api/disciplines/${disciplineId}`, options);
};

export const getGetDisciplineQueryKey = (disciplineId: MaybeRef<number>) => {
  return ["api", "disciplines", disciplineId] as const;
};

export const getGetDisciplineQueryOptions = <
  TData = Awaited<ReturnType<typeof getDiscipline>>,
  TError = AxiosError<void>,
>(
  disciplineId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDiscipline>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetDisciplineQueryKey(disciplineId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiscipline>>> = ({
    signal,
  }) => getDiscipline(disciplineId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(disciplineId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDiscipline>>,
    TError,
    TData
  >;
};

export type GetDisciplineQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDiscipline>>
>;
export type GetDisciplineQueryError = AxiosError<void>;

export function useGetDiscipline<
  TData = Awaited<ReturnType<typeof getDiscipline>>,
  TError = AxiosError<void>,
>(
  disciplineId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDiscipline>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDisciplineQueryOptions(disciplineId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const updateDiscipline = (
  disciplineId: MaybeRef<number>,
  disciplineEditDto: MaybeRef<DisciplineEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  disciplineId = unref(disciplineId);
  disciplineEditDto = unref(disciplineEditDto);

  return axios.default.put(
    `/api/disciplines/${disciplineId}`,
    disciplineEditDto,
    options,
  );
};

export const getUpdateDisciplineMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDiscipline>>,
    TError,
    { disciplineId: number; data: DisciplineEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateDiscipline>>,
  TError,
  { disciplineId: number; data: DisciplineEditDto },
  TContext
> => {
  const mutationKey = ["updateDiscipline"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDiscipline>>,
    { disciplineId: number; data: DisciplineEditDto }
  > = (props) => {
    const { disciplineId, data } = props ?? {};

    return updateDiscipline(disciplineId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateDisciplineMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateDiscipline>>
>;
export type UpdateDisciplineMutationBody = DisciplineEditDto;
export type UpdateDisciplineMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useUpdateDiscipline = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateDiscipline>>,
      TError,
      { disciplineId: number; data: DisciplineEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateDiscipline>>,
  TError,
  { disciplineId: number; data: DisciplineEditDto },
  TContext
> => {
  const mutationOptions = getUpdateDisciplineMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteDiscipline = (
  disciplineId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  disciplineId = unref(disciplineId);

  return axios.default.delete(`/api/disciplines/${disciplineId}`, options);
};

export const getDeleteDisciplineMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDiscipline>>,
    TError,
    { disciplineId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDiscipline>>,
  TError,
  { disciplineId: number },
  TContext
> => {
  const mutationKey = ["deleteDiscipline"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDiscipline>>,
    { disciplineId: number }
  > = (props) => {
    const { disciplineId } = props ?? {};

    return deleteDiscipline(disciplineId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDisciplineMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDiscipline>>
>;

export type DeleteDisciplineMutationError = AxiosError<void>;

export const useDeleteDiscipline = <
  TError = AxiosError<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteDiscipline>>,
      TError,
      { disciplineId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteDiscipline>>,
  TError,
  { disciplineId: number },
  TContext
> => {
  const mutationOptions = getDeleteDisciplineMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getParticipants = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListParticipantDto[]>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(
    `/api/tournaments/${tournamentId}/participants`,
    options,
  );
};

export const getGetParticipantsQueryKey = (tournamentId: MaybeRef<number>) => {
  return ["api", "tournaments", tournamentId, "participants"] as const;
};

export const getGetParticipantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getParticipants>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipants>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetParticipantsQueryKey(tournamentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getParticipants>>> = ({
    signal,
  }) => getParticipants(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getParticipants>>,
    TError,
    TData
  >;
};

export type GetParticipantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParticipants>>
>;
export type GetParticipantsQueryError = AxiosError<void>;

export function useGetParticipants<
  TData = Awaited<ReturnType<typeof getParticipants>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipants>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetParticipantsQueryOptions(tournamentId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const createParticipant = (
  tournamentId: MaybeRef<number>,
  participantEditDto: MaybeRef<ParticipantEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  tournamentId = unref(tournamentId);
  participantEditDto = unref(participantEditDto);

  return axios.default.post(
    `/api/tournaments/${tournamentId}/participants`,
    participantEditDto,
    options,
  );
};

export const getCreateParticipantMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createParticipant>>,
    TError,
    { tournamentId: number; data: ParticipantEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createParticipant>>,
  TError,
  { tournamentId: number; data: ParticipantEditDto },
  TContext
> => {
  const mutationKey = ["createParticipant"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createParticipant>>,
    { tournamentId: number; data: ParticipantEditDto }
  > = (props) => {
    const { tournamentId, data } = props ?? {};

    return createParticipant(tournamentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateParticipantMutationResult = NonNullable<
  Awaited<ReturnType<typeof createParticipant>>
>;
export type CreateParticipantMutationBody = ParticipantEditDto;
export type CreateParticipantMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useCreateParticipant = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createParticipant>>,
      TError,
      { tournamentId: number; data: ParticipantEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createParticipant>>,
  TError,
  { tournamentId: number; data: ParticipantEditDto },
  TContext
> => {
  const mutationOptions = getCreateParticipantMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getNextParticipantStartNumber = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(
    `/api/tournaments/${tournamentId}/participants/nextStartNumber`,
    options,
  );
};

export const getGetNextParticipantStartNumberQueryKey = (
  tournamentId: MaybeRef<number>,
) => {
  return [
    "api",
    "tournaments",
    tournamentId,
    "participants",
    "nextStartNumber",
  ] as const;
};

export const getGetNextParticipantStartNumberQueryOptions = <
  TData = Awaited<ReturnType<typeof getNextParticipantStartNumber>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNextParticipantStartNumber>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetNextParticipantStartNumberQueryKey(tournamentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNextParticipantStartNumber>>
  > = ({ signal }) =>
    getNextParticipantStartNumber(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNextParticipantStartNumber>>,
    TError,
    TData
  >;
};

export type GetNextParticipantStartNumberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNextParticipantStartNumber>>
>;
export type GetNextParticipantStartNumberQueryError = AxiosError<void>;

export function useGetNextParticipantStartNumber<
  TData = Awaited<ReturnType<typeof getNextParticipantStartNumber>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNextParticipantStartNumber>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNextParticipantStartNumberQueryOptions(
    tournamentId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getParticipant = (
  participantId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ParticipantDetailDto>> => {
  participantId = unref(participantId);

  return axios.default.get(`/api/participants/${participantId}`, options);
};

export const getGetParticipantQueryKey = (participantId: MaybeRef<number>) => {
  return ["api", "participants", participantId] as const;
};

export const getGetParticipantQueryOptions = <
  TData = Awaited<ReturnType<typeof getParticipant>>,
  TError = AxiosError<void>,
>(
  participantId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getParticipant>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetParticipantQueryKey(participantId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getParticipant>>> = ({
    signal,
  }) => getParticipant(participantId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(participantId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getParticipant>>,
    TError,
    TData
  >;
};

export type GetParticipantQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParticipant>>
>;
export type GetParticipantQueryError = AxiosError<void>;

export function useGetParticipant<
  TData = Awaited<ReturnType<typeof getParticipant>>,
  TError = AxiosError<void>,
>(
  participantId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getParticipant>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetParticipantQueryOptions(participantId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const updateParticipant = (
  participantId: MaybeRef<number>,
  participantEditDto: MaybeRef<ParticipantEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  participantId = unref(participantId);
  participantEditDto = unref(participantEditDto);

  return axios.default.put(
    `/api/participants/${participantId}`,
    participantEditDto,
    options,
  );
};

export const getUpdateParticipantMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateParticipant>>,
    TError,
    { participantId: number; data: ParticipantEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateParticipant>>,
  TError,
  { participantId: number; data: ParticipantEditDto },
  TContext
> => {
  const mutationKey = ["updateParticipant"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateParticipant>>,
    { participantId: number; data: ParticipantEditDto }
  > = (props) => {
    const { participantId, data } = props ?? {};

    return updateParticipant(participantId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateParticipantMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateParticipant>>
>;
export type UpdateParticipantMutationBody = ParticipantEditDto;
export type UpdateParticipantMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useUpdateParticipant = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateParticipant>>,
      TError,
      { participantId: number; data: ParticipantEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateParticipant>>,
  TError,
  { participantId: number; data: ParticipantEditDto },
  TContext
> => {
  const mutationOptions = getUpdateParticipantMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteParticipant = (
  participantId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  participantId = unref(participantId);

  return axios.default.delete(`/api/participants/${participantId}`, options);
};

export const getDeleteParticipantMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteParticipant>>,
    TError,
    { participantId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteParticipant>>,
  TError,
  { participantId: number },
  TContext
> => {
  const mutationKey = ["deleteParticipant"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteParticipant>>,
    { participantId: number }
  > = (props) => {
    const { participantId } = props ?? {};

    return deleteParticipant(participantId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteParticipantMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteParticipant>>
>;

export type DeleteParticipantMutationError = AxiosError<void>;

export const useDeleteParticipant = <
  TError = AxiosError<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteParticipant>>,
      TError,
      { participantId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteParticipant>>,
  TError,
  { participantId: number },
  TContext
> => {
  const mutationOptions = getDeleteParticipantMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getParticipantResults = (
  participantId: MaybeRef<number>,
  disciplineId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ParticipantResultDetailDto>> => {
  participantId = unref(participantId);
  disciplineId = unref(disciplineId);

  return axios.default.get(
    `/api/participants/${participantId}/results/${disciplineId}`,
    options,
  );
};

export const getGetParticipantResultsQueryKey = (
  participantId: MaybeRef<number>,
  disciplineId: MaybeRef<number>,
) => {
  return [
    "api",
    "participants",
    participantId,
    "results",
    disciplineId,
  ] as const;
};

export const getGetParticipantResultsQueryOptions = <
  TData = Awaited<ReturnType<typeof getParticipantResults>>,
  TError = AxiosError<void>,
>(
  participantId: MaybeRef<number>,
  disciplineId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipantResults>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetParticipantResultsQueryKey(
    participantId,
    disciplineId,
  );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getParticipantResults>>
  > = ({ signal }) =>
    getParticipantResults(participantId, disciplineId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(participantId) && unref(disciplineId))),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getParticipantResults>>,
    TError,
    TData
  >;
};

export type GetParticipantResultsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParticipantResults>>
>;
export type GetParticipantResultsQueryError = AxiosError<void>;

export function useGetParticipantResults<
  TData = Awaited<ReturnType<typeof getParticipantResults>>,
  TError = AxiosError<void>,
>(
  participantId: MaybeRef<number>,
  disciplineId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getParticipantResults>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetParticipantResultsQueryOptions(
    participantId,
    disciplineId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const updateParticipantResults = (
  participantId: MaybeRef<number>,
  disciplineId: MaybeRef<number>,
  participantResultEditDto: MaybeRef<ParticipantResultEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  participantId = unref(participantId);
  disciplineId = unref(disciplineId);
  participantResultEditDto = unref(participantResultEditDto);

  return axios.default.put(
    `/api/participants/${participantId}/results/${disciplineId}`,
    participantResultEditDto,
    options,
  );
};

export const getUpdateParticipantResultsMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateParticipantResults>>,
    TError,
    {
      participantId: number;
      disciplineId: number;
      data: ParticipantResultEditDto;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateParticipantResults>>,
  TError,
  {
    participantId: number;
    disciplineId: number;
    data: ParticipantResultEditDto;
  },
  TContext
> => {
  const mutationKey = ["updateParticipantResults"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateParticipantResults>>,
    {
      participantId: number;
      disciplineId: number;
      data: ParticipantResultEditDto;
    }
  > = (props) => {
    const { participantId, disciplineId, data } = props ?? {};

    return updateParticipantResults(
      participantId,
      disciplineId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateParticipantResultsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateParticipantResults>>
>;
export type UpdateParticipantResultsMutationBody = ParticipantResultEditDto;
export type UpdateParticipantResultsMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useUpdateParticipantResults = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateParticipantResults>>,
      TError,
      {
        participantId: number;
        disciplineId: number;
        data: ParticipantResultEditDto;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateParticipantResults>>,
  TError,
  {
    participantId: number;
    disciplineId: number;
    data: ParticipantResultEditDto;
  },
  TContext
> => {
  const mutationOptions = getUpdateParticipantResultsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getTeamDisciplines = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListTeamDisciplineDto[]>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(
    `/api/tournaments/${tournamentId}/team_disciplines`,
    options,
  );
};

export const getGetTeamDisciplinesQueryKey = (
  tournamentId: MaybeRef<number>,
) => {
  return ["api", "tournaments", tournamentId, "team_disciplines"] as const;
};

export const getGetTeamDisciplinesQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamDisciplines>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamDisciplines>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTeamDisciplinesQueryKey(tournamentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamDisciplines>>
  > = ({ signal }) =>
    getTeamDisciplines(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamDisciplines>>,
    TError,
    TData
  >;
};

export type GetTeamDisciplinesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamDisciplines>>
>;
export type GetTeamDisciplinesQueryError = AxiosError<void>;

export function useGetTeamDisciplines<
  TData = Awaited<ReturnType<typeof getTeamDisciplines>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamDisciplines>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTeamDisciplinesQueryOptions(tournamentId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const createTeamDiscipline = (
  tournamentId: MaybeRef<number>,
  teamDisciplineEditDto: MaybeRef<TeamDisciplineEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  tournamentId = unref(tournamentId);
  teamDisciplineEditDto = unref(teamDisciplineEditDto);

  return axios.default.post(
    `/api/tournaments/${tournamentId}/team_disciplines`,
    teamDisciplineEditDto,
    options,
  );
};

export const getCreateTeamDisciplineMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTeamDiscipline>>,
    TError,
    { tournamentId: number; data: TeamDisciplineEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTeamDiscipline>>,
  TError,
  { tournamentId: number; data: TeamDisciplineEditDto },
  TContext
> => {
  const mutationKey = ["createTeamDiscipline"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTeamDiscipline>>,
    { tournamentId: number; data: TeamDisciplineEditDto }
  > = (props) => {
    const { tournamentId, data } = props ?? {};

    return createTeamDiscipline(tournamentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTeamDisciplineMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTeamDiscipline>>
>;
export type CreateTeamDisciplineMutationBody = TeamDisciplineEditDto;
export type CreateTeamDisciplineMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useCreateTeamDiscipline = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTeamDiscipline>>,
      TError,
      { tournamentId: number; data: TeamDisciplineEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createTeamDiscipline>>,
  TError,
  { tournamentId: number; data: TeamDisciplineEditDto },
  TContext
> => {
  const mutationOptions = getCreateTeamDisciplineMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getTeamDiscipline = (
  teamDisciplineId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TeamDisciplineDetailDto>> => {
  teamDisciplineId = unref(teamDisciplineId);

  return axios.default.get(
    `/api/team_disciplines/${teamDisciplineId}`,
    options,
  );
};

export const getGetTeamDisciplineQueryKey = (
  teamDisciplineId: MaybeRef<number>,
) => {
  return ["api", "team_disciplines", teamDisciplineId] as const;
};

export const getGetTeamDisciplineQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamDiscipline>>,
  TError = AxiosError<void>,
>(
  teamDisciplineId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamDiscipline>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTeamDisciplineQueryKey(teamDisciplineId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamDiscipline>>
  > = ({ signal }) =>
    getTeamDiscipline(teamDisciplineId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(teamDisciplineId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamDiscipline>>,
    TError,
    TData
  >;
};

export type GetTeamDisciplineQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamDiscipline>>
>;
export type GetTeamDisciplineQueryError = AxiosError<void>;

export function useGetTeamDiscipline<
  TData = Awaited<ReturnType<typeof getTeamDiscipline>>,
  TError = AxiosError<void>,
>(
  teamDisciplineId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamDiscipline>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTeamDisciplineQueryOptions(
    teamDisciplineId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const updateTeamDiscipline = (
  teamDisciplineId: MaybeRef<number>,
  teamDisciplineEditDto: MaybeRef<TeamDisciplineEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  teamDisciplineId = unref(teamDisciplineId);
  teamDisciplineEditDto = unref(teamDisciplineEditDto);

  return axios.default.put(
    `/api/team_disciplines/${teamDisciplineId}`,
    teamDisciplineEditDto,
    options,
  );
};

export const getUpdateTeamDisciplineMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTeamDiscipline>>,
    TError,
    { teamDisciplineId: number; data: TeamDisciplineEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTeamDiscipline>>,
  TError,
  { teamDisciplineId: number; data: TeamDisciplineEditDto },
  TContext
> => {
  const mutationKey = ["updateTeamDiscipline"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTeamDiscipline>>,
    { teamDisciplineId: number; data: TeamDisciplineEditDto }
  > = (props) => {
    const { teamDisciplineId, data } = props ?? {};

    return updateTeamDiscipline(teamDisciplineId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTeamDisciplineMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTeamDiscipline>>
>;
export type UpdateTeamDisciplineMutationBody = TeamDisciplineEditDto;
export type UpdateTeamDisciplineMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useUpdateTeamDiscipline = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTeamDiscipline>>,
      TError,
      { teamDisciplineId: number; data: TeamDisciplineEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateTeamDiscipline>>,
  TError,
  { teamDisciplineId: number; data: TeamDisciplineEditDto },
  TContext
> => {
  const mutationOptions = getUpdateTeamDisciplineMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteTeamDiscipline = (
  teamDisciplineId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  teamDisciplineId = unref(teamDisciplineId);

  return axios.default.delete(
    `/api/team_disciplines/${teamDisciplineId}`,
    options,
  );
};

export const getDeleteTeamDisciplineMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTeamDiscipline>>,
    TError,
    { teamDisciplineId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTeamDiscipline>>,
  TError,
  { teamDisciplineId: number },
  TContext
> => {
  const mutationKey = ["deleteTeamDiscipline"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTeamDiscipline>>,
    { teamDisciplineId: number }
  > = (props) => {
    const { teamDisciplineId } = props ?? {};

    return deleteTeamDiscipline(teamDisciplineId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTeamDisciplineMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTeamDiscipline>>
>;

export type DeleteTeamDisciplineMutationError = AxiosError<void>;

export const useDeleteTeamDiscipline = <
  TError = AxiosError<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTeamDiscipline>>,
      TError,
      { teamDisciplineId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteTeamDiscipline>>,
  TError,
  { teamDisciplineId: number },
  TContext
> => {
  const mutationOptions = getDeleteTeamDisciplineMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getTeams = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListTeamDto[]>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(`/api/tournaments/${tournamentId}/teams`, options);
};

export const getGetTeamsQueryKey = (tournamentId: MaybeRef<number>) => {
  return ["api", "tournaments", tournamentId, "teams"] as const;
};

export const getGetTeamsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeams>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeams>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTeamsQueryKey(tournamentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeams>>> = ({
    signal,
  }) => getTeams(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getTeams>>, TError, TData>;
};

export type GetTeamsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeams>>
>;
export type GetTeamsQueryError = AxiosError<void>;

export function useGetTeams<
  TData = Awaited<ReturnType<typeof getTeams>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeams>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTeamsQueryOptions(tournamentId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const createTeam = (
  tournamentId: MaybeRef<number>,
  teamEditDto: MaybeRef<TeamEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  tournamentId = unref(tournamentId);
  teamEditDto = unref(teamEditDto);

  return axios.default.post(
    `/api/tournaments/${tournamentId}/teams`,
    teamEditDto,
    options,
  );
};

export const getCreateTeamMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTeam>>,
    TError,
    { tournamentId: number; data: TeamEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTeam>>,
  TError,
  { tournamentId: number; data: TeamEditDto },
  TContext
> => {
  const mutationKey = ["createTeam"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTeam>>,
    { tournamentId: number; data: TeamEditDto }
  > = (props) => {
    const { tournamentId, data } = props ?? {};

    return createTeam(tournamentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTeamMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTeam>>
>;
export type CreateTeamMutationBody = TeamEditDto;
export type CreateTeamMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useCreateTeam = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTeam>>,
      TError,
      { tournamentId: number; data: TeamEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createTeam>>,
  TError,
  { tournamentId: number; data: TeamEditDto },
  TContext
> => {
  const mutationOptions = getCreateTeamMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getNextTeamStartNumber = (
  tournamentId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  tournamentId = unref(tournamentId);

  return axios.default.get(
    `/api/tournaments/${tournamentId}/teams/nextStartNumber`,
    options,
  );
};

export const getGetNextTeamStartNumberQueryKey = (
  tournamentId: MaybeRef<number>,
) => {
  return [
    "api",
    "tournaments",
    tournamentId,
    "teams",
    "nextStartNumber",
  ] as const;
};

export const getGetNextTeamStartNumberQueryOptions = <
  TData = Awaited<ReturnType<typeof getNextTeamStartNumber>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNextTeamStartNumber>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetNextTeamStartNumberQueryKey(tournamentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNextTeamStartNumber>>
  > = ({ signal }) =>
    getNextTeamStartNumber(tournamentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tournamentId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNextTeamStartNumber>>,
    TError,
    TData
  >;
};

export type GetNextTeamStartNumberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNextTeamStartNumber>>
>;
export type GetNextTeamStartNumberQueryError = AxiosError<void>;

export function useGetNextTeamStartNumber<
  TData = Awaited<ReturnType<typeof getNextTeamStartNumber>>,
  TError = AxiosError<void>,
>(
  tournamentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNextTeamStartNumber>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNextTeamStartNumberQueryOptions(
    tournamentId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getTeam = (
  teamId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<TeamDetailDto>> => {
  teamId = unref(teamId);

  return axios.default.get(`/api/teams/${teamId}`, options);
};

export const getGetTeamQueryKey = (teamId: MaybeRef<number>) => {
  return ["api", "teams", teamId] as const;
};

export const getGetTeamQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeam>>,
  TError = AxiosError<void>,
>(
  teamId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTeamQueryKey(teamId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeam>>> = ({
    signal,
  }) => getTeam(teamId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(teamId)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData>;
};

export type GetTeamQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeam>>
>;
export type GetTeamQueryError = AxiosError<void>;

export function useGetTeam<
  TData = Awaited<ReturnType<typeof getTeam>>,
  TError = AxiosError<void>,
>(
  teamId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeam>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTeamQueryOptions(teamId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const updateTeam = (
  teamId: MaybeRef<number>,
  teamEditDto: MaybeRef<TeamEditDto>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  teamId = unref(teamId);
  teamEditDto = unref(teamEditDto);

  return axios.default.put(`/api/teams/${teamId}`, teamEditDto, options);
};

export const getUpdateTeamMutationOptions = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTeam>>,
    TError,
    { teamId: number; data: TeamEditDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTeam>>,
  TError,
  { teamId: number; data: TeamEditDto },
  TContext
> => {
  const mutationKey = ["updateTeam"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTeam>>,
    { teamId: number; data: TeamEditDto }
  > = (props) => {
    const { teamId, data } = props ?? {};

    return updateTeam(teamId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTeamMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTeam>>
>;
export type UpdateTeamMutationBody = TeamEditDto;
export type UpdateTeamMutationError =
  AxiosError<HttpValidationProblemDetails | void>;

export const useUpdateTeam = <
  TError = AxiosError<HttpValidationProblemDetails | void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTeam>>,
      TError,
      { teamId: number; data: TeamEditDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof updateTeam>>,
  TError,
  { teamId: number; data: TeamEditDto },
  TContext
> => {
  const mutationOptions = getUpdateTeamMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteTeam = (
  teamId: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  teamId = unref(teamId);

  return axios.default.delete(`/api/teams/${teamId}`, options);
};

export const getDeleteTeamMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTeam>>,
    TError,
    { teamId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTeam>>,
  TError,
  { teamId: number },
  TContext
> => {
  const mutationKey = ["deleteTeam"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTeam>>,
    { teamId: number }
  > = (props) => {
    const { teamId } = props ?? {};

    return deleteTeam(teamId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTeamMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTeam>>
>;

export type DeleteTeamMutationError = AxiosError<void>;

export const useDeleteTeam = <TError = AxiosError<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTeam>>,
      TError,
      { teamId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteTeam>>,
  TError,
  { teamId: number },
  TContext
> => {
  const mutationOptions = getDeleteTeamMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const setScoreboardTournament = (
  setScoreboardTournamentBody: MaybeRef<number>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  setScoreboardTournamentBody = unref(setScoreboardTournamentBody);

  return axios.default.post(
    `/api/scoreboard/tournament`,
    setScoreboardTournamentBody,
    options,
  );
};

export const getSetScoreboardTournamentMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setScoreboardTournament>>,
    TError,
    { data: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setScoreboardTournament>>,
  TError,
  { data: number },
  TContext
> => {
  const mutationKey = ["setScoreboardTournament"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setScoreboardTournament>>,
    { data: number }
  > = (props) => {
    const { data } = props ?? {};

    return setScoreboardTournament(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetScoreboardTournamentMutationResult = NonNullable<
  Awaited<ReturnType<typeof setScoreboardTournament>>
>;
export type SetScoreboardTournamentMutationBody = number;
export type SetScoreboardTournamentMutationError = AxiosError<string>;

export const useSetScoreboardTournament = <
  TError = AxiosError<string>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof setScoreboardTournament>>,
      TError,
      { data: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof setScoreboardTournament>>,
  TError,
  { data: number },
  TContext
> => {
  const mutationOptions = getSetScoreboardTournamentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
